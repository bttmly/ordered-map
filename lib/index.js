// Generated by CoffeeScript 1.8.0
var OrderedMap;

OrderedMap = function() {
  var head, instance, internal_at, size, storage, tail;
  storage = Object.create(null);
  head = null;
  tail = null;
  size = 0;
  internal_at = function(key) {
    return storage[key];
  };
  instance = {
    push: function(key, value) {
      var item, prior_tail;
      prior_tail = tail;
      item = {
        key: key,
        value: value,
        prev: prior_tail,
        next: null
      };
      tail = storage[key] = item;
      if (prior_tail != null) {
        prior_tail.next = item;
      }
      storage[key] = item;
      if (head == null) {
        head = item;
      }
      return size += 1;
    },
    pop: function() {
      var prior_tail;
      if (!tail) {
        return null;
      }
      prior_tail = tail;
      tail = prior_tail.prev;
      if (tail != null) {
        tail.next = null;
      }
      size -= 1;
      return prior_tail.value;
    },
    unshift: function(key, value) {
      var item, prior_head;
      prior_head = head;
      item = {
        key: key,
        value: value,
        prev: null,
        next: prior_head
      };
      head = storage[key] = item;
      if (prior_head != null) {
        prior_head.prev = item;
      }
      if (!tail) {
        tail = item;
      }
      return size += 1;
    },
    shift: function() {
      var prior_head;
      if (!head) {
        return null;
      }
      prior_head = head;
      head = prior_head.next;
      if (head != null) {
        head.prev = null;
      }
      size -= 1;
      return prior_head.value;
    },
    get: function(key) {
      var ret, _ref;
      ret = (_ref = storage[key]) != null ? _ref.value : void 0;
      if (ret != null) {
        return ret;
      } else {
        return null;
      }
    },
    remove: function(key) {
      var item, _ref, _ref1;
      item = internal_at(key);
      if (item == null) {
        return null;
      }
      if (item === head) {
        return instance.shift();
      }
      if (item === tail) {
        return instance.pop();
      }
      if ((_ref = item.prev) != null) {
        _ref.next = item.next;
      }
      if ((_ref1 = item.next) != null) {
        _ref1.prev = item.prev;
      }
      size -= 1;
      return item.value;
    },
    keys: function() {
      var item, ret;
      ret = [];
      item = head;
      while (item != null) {
        ret.push(item.key);
        item = item.next;
      }
      return ret;
    },
    forEach: function(cb) {
      var item;
      item = head;
      while (item != null) {
        cb(item.key, item.value);
        item = item.next;
      }
      return void 0;
    },
    tail: function() {
      return tail;
    },
    size: function() {
      return size;
    },
    head: function() {
      return head;
    }
  };
  return instance;
};

module.exports = OrderedMap;
